{"version":3,"sources":["Grid/Row/Column/Column.jsx","Grid/Row/Row.jsx","Grid/Grid.jsx","App.js","serviceWorker.js","index.js"],"names":["Column","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","columnWidth","columnHeight","initResize","bind","assertThisInitialized","resize","stopResize","$","window","e","newColumnWidth","clientX","offset","left","newColumnHeight","clientY","top","setState","unbind","ColumnStyles","columnStyle","boxSizing","position","width","height","backgroundColor","border","spanStyle","display","bottom","right","react_default","a","createElement","className","style","onMouseDown","React","Component","Row","alignItems","Row_Column_Column","Grid","Grid_Row_Row","App","src_Grid_Grid","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0RAqEeA,cAjEb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,YAAa,MACbC,aAAc,SAEhBT,EAAKU,WAAaV,EAAKU,WAAWC,KAAhBV,OAAAW,EAAA,EAAAX,CAAAD,IAClBA,EAAKa,OAASb,EAAKa,OAAOF,KAAZV,OAAAW,EAAA,EAAAX,CAAAD,IACdA,EAAKc,WAAad,EAAKc,WAAWH,KAAhBV,OAAAW,EAAA,EAAAX,CAAAD,IARDA,4EAYjBe,IAAEC,QAAQL,KAAK,YAAaR,KAAKU,QACjCE,IAAEC,QAAQL,KAAK,UAAWR,KAAKW,2CAG1BG,GACL,IAAIC,EAAiBD,EAAEE,QAAUJ,IAAE,WAAWK,SAASC,KACnDC,EAAkBL,EAAEM,QAAUR,IAAE,WAAWK,SAASI,IAExDrB,KAAKsB,SAAS,CACZjB,YAAaU,EACbT,aAAca,yCAKhBP,IAAEC,QAAQU,OAAO,YAAavB,KAAKU,QACnCE,IAAEC,QAAQU,OAAO,UAAWvB,KAAKW,6CAIjC,IAAMa,EAAe,CACnBC,YAAa,CACXC,UAAW,aACXC,SAAU,WACVC,MAAO5B,KAAKI,MAAMC,YAClBwB,OAAQ7B,KAAKI,MAAME,aACnBwB,gBAAiB,YACjBC,OAAQ,mBAEVC,UAAW,CACTC,QAAS,eACTN,SAAU,WACVO,OAAQ,EACRC,MAAO,EACPP,MAAO,OACPC,OAAQ,OACRC,gBAAiB,QAIrB,OACEM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASC,MAAOhB,EAAaC,aAA5C,wCACUzB,KAAKI,MAAMC,YADrB,IACkC+B,EAAAC,EAAAC,cAAA,WADlC,wCAEUtC,KAAKI,MAAME,aACnB8B,EAAAC,EAAAC,cAAA,QACEE,MAAOhB,EAAaQ,UACpBS,YAAazC,KAAKO,qBA3DPmC,IAAMC,WCgBZC,mLARb,OACCR,EAAAC,EAAAC,cAAA,OAAKE,MANY,CACjBP,QAAS,OACTY,WAAY,WAIUpB,aACrBW,EAAAC,EAAAC,cAACQ,EAAD,cATcJ,IAAMC,WCMTI,mLAJP,OAAOX,EAAAC,EAAAC,cAACU,EAAD,aAFIN,IAAMC,WCSVM,MARf,WACE,OACEb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACY,EAAD,QCIcC,QACW,cAA7BtC,OAAOuC,SAASC,UAEe,UAA7BxC,OAAOuC,SAASC,UAEhBxC,OAAOuC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.56d7d2d3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport $ from \"jquery\";\r\n\r\nclass Column extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      columnWidth: \"50%\",\r\n      columnHeight: \"300px\"\r\n    };\r\n    this.initResize = this.initResize.bind(this);\r\n    this.resize = this.resize.bind(this);\r\n    this.stopResize = this.stopResize.bind(this);\r\n  }\r\n\r\n  initResize() {\r\n    $(window).bind(\"mousemove\", this.resize);\r\n    $(window).bind(\"mouseup\", this.stopResize);\r\n  }\r\n\r\n  resize(e) {\r\n    let newColumnWidth = e.clientX - $(\".column\").offset().left;\r\n    let newColumnHeight = e.clientY - $(\".column\").offset().top;\r\n\r\n    this.setState({\r\n      columnWidth: newColumnWidth,\r\n      columnHeight: newColumnHeight\r\n    });\r\n  }\r\n\r\n  stopResize() {\r\n    $(window).unbind(\"mousemove\", this.resize);\r\n    $(window).unbind(\"mouseup\", this.stopResize);\r\n  }\r\n\r\n  render() {\r\n    const ColumnStyles = {\r\n      columnStyle: {\r\n        boxSizing: \"border-box\",\r\n        position: \"relative\",\r\n        width: this.state.columnWidth,\r\n        height: this.state.columnHeight,\r\n        backgroundColor: \"lightblue\",\r\n        border: \"1px solid black\"\r\n      },\r\n      spanStyle: {\r\n        display: \"inline-block\",\r\n        position: \"absolute\",\r\n        bottom: 0,\r\n        right: 0,\r\n        width: \"20px\",\r\n        height: \"20px\",\r\n        backgroundColor: \"red\"\r\n      }\r\n    };\r\n\r\n    return (\r\n      <div className=\"column\" style={ColumnStyles.columnStyle}>\r\n        ширина {this.state.columnWidth} <br />\r\n        высота {this.state.columnHeight}\r\n        <span\r\n          style={ColumnStyles.spanStyle}\r\n          onMouseDown={this.initResize}\r\n        ></span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Column;\r\n","import React from 'react';\r\n\r\nimport Column from './Column/Column.jsx';\r\n\r\nclass Row extends React.Component {\r\n\trender() {\r\n\t\tconst RowStyles = {\r\n\t\t\tdisplay: 'flex',\r\n\t\t\talignItems: 'stretch'\r\n\t\t};\r\n\r\n\t\treturn (\r\n\t\t\t<div style={RowStyles.columnStyle}>\r\n\t\t\t\t<Column/>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Row;","import React from 'react';\r\n\r\nimport Row from \"./Row/Row\";\r\n\r\nclass Grid extends React.Component {\r\n    render() {\r\n        return <Row/>\r\n    }\r\n}\r\n\r\nexport default Grid;","import React from 'react';\r\n\r\nimport './App.css';\r\nimport Grid from \"./Grid/Grid\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Grid />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}